Title:  Writeup for Project 1, Fall/Spring 200x
 Date:  06/10/15
 Group:	Name		Email				SS#
		Jerry Webb	jerryweb@usc.edu	1288504108
		Andrew Lee	lee533@usc.edu		7540910244
		???			???					???


I. Requirements:
    Part 1: Implement locks and condition variables by filling in the empty framework provided.
    Part 2: Create a multi-threaded airport simulation with the following components:
             - Passengers, who enter the airport with a ticket and luggage and proceed through the simulation until boarding their airplane.
             - Liaisons, who direct passengers to the correct check-in area.
             - Check-in staff, who give passengers boarding passes and process their luggage.
             - Cargo handlers, who transfer processed luggage to their proper airplanes.
             - Screening officers, who check passengers and send them to a security inspector.
             - Security inspectors, who clear passengers checked by the screening officers.
             - A manager, who ensures that all staff are working and allows passengers to board their airplanes at the end of the simulation.

II. Assumptions:
	For the airport simulation:
     - Each airline only has one airplane.
     - All airlines have the same number of check-in staff.
     - Everyone who keeps track of statistics for the manager does so individually, and the manager polls everyone and adds the results to get the full picture.
     - Passengers are randomly assigned to airlines and given luggage.
     - Passengers will enter a check-in line regardless of whether the staff is on break or not.
     - Each screening officer has a line, and the passenger finds the shortest one.
     
III. Design:
- This section is to cover your logic and ideas as to how  you are going to solve the problem presented.  This should include a description of classes, algorithms, etc.

    Part 1: The lock and CV algorithms were given by the professor in class.
    Part 2: Each component in the airport simulation has its own class; there is also an "Airport" class for public data.

IV. Implementation:
	+ Files Modified
	+ Files added

	+ Data Structures added, and the file they were added to.
	+ Data Structures modified, and the file they were added to.
		-For example,
			class Lock		-- in file threads.cc/threads.h
			{
				//. Modified fields.
			}

	+ Functions added and in which file.
	+ Functions modified and in which file.

V. Testing:  (For each test case, you must show)
	+ How to test
        All tests are run from the code/threads folder, using the command "nachos".
        The arguments that correspond with each test are:
         "-T":       Lock and CV test code
         "-findL":   Passenger selects the shortest line for the airport liaison
         "-liaison": Passenger is directed by the Liaison to the correct airline counters
         "-findCIS": Economy class passengers enter the shortest line while Executive class passengers enter their correct line
         "-checkin": Executive class passengers are given priority over the economy class passengers at the check-in kiosks
         "":         Screening officer chooses an available security inspector each time a passenger comes in.
         "-cargo":   Cargo handlers choose bags from the conveyor system each time and go on a break if there are no bags.
         "":         Handing over of the hand luggage by the passenger to the screening officer.
         "":         Passenger returns to the same security inspector after further questioning.
         "":         Baggage weights of all the passengers of a particular airline should match the weights of the bags reported by the cargo handlers.
         "":         Handing over of boarding pass by the passenger to the security inspector
         "-airport": Full airport simulation
    + Test Output
- Describe the testing output. You don't have to dump all the output info. Just make sure your description can exactly reflect your output.
    

VI. Discussion:
	+ Experiment expectation.  (What you hope will happen.)
	+ Experiment result.  (What actually happens.)
	+ Explanation
		- Explain your experiment result.

VIII. Miscellaneous:
- Whatever else you want the grader know about your development.  You can create your own subsections headings here.
