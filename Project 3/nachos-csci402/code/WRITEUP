Title:  Writeup for Project 3, Summer 2015
 Date:  07/15/15
 Group:	Name		Email				SS#
		Jerry Webb	jerryweb@usc.edu	1288504108
		Andrew Lee	lee533@usc.edu		7540910244
		Hao Cui		hcui@usc.edu		1454367516

I. Requirements:
    Part 1/2: Implement virtual memory in nachos, using TLB and swap file, and random and FIFO page replacement policies. Show that multiple large programs in different threads and/or processes run to completion correctly using the virtual memory.
    Part 3: Implement remote procedure calls for locks, condition variables, and monitor variables.

II. Assumptions:
	

III. Design:
- This section is to cover your logic and ideas as to how  you are going to solve the problem presented.  This should include a description of classes, algorithms, etc.

IV. Implementation:
	+ Files Modified
        code/
            Makefile.common
        code/machine/
            machine.h (reset NumPhysPages to 32)
        code/network/
            nettest.cc
        code/test/
            Makefile
            forkTest.c
            start.s
        code/threads/
            main.cc
            swapfile
            system.h/.cc
            thread.h/.cc
        code/userprog/
            addrspace.h/.cc
            exception.cc
            progtest.cc
            syscall.h
            table.h
                
	+ Files added
        code/network/
            serversynch.h/cc
        code/test/
            matmultExec.c
            matmultFork.c
        code/userprog/
            translateexec.h
            translateipt.h
        
	+ Data Structures added, and the file they were added to.
        
    
	+ Data Structures modified, and the file they were added to.
        
    
	+ Functions added and in which file.
        
    
	+ Functions modified and in which file.
        
    

V. Testing:  (For each test case, you must show)
	+ How to test
        nachos -x ../test/<testfile>
            test files:
                matmult
                    basic matmult test
                matmultFork
                    forks two matmult threads
                matmultExec
                    execs two processes which run 'matmult'
                sort
                    basic sort test
            non-standard optional arguments:
                -d <flag>
                    'x' for vm debug statements
                    'z' for syscall debug statements
                    'p' for page initialization debug statements
                -P <FIFO/RAND>
                    chooses the given eviction policy. defaults to FIFO if not present or not valid.
        [NETWORK]
	+ Test Output
        register 4 prints out at the end of every thread:
            <thread name>   The contents of register 4 is <number>
                0 for main thread
                7220 for every matmult thread
                1023 for every sort thread
        [NETWORK]

VI. Discussion:
	+ Experiment expectation
        every matmult returns 7220, every sort returns 1023.
        [NETWORK]
	+ Experiment result
        works as intended.
        [NETWORK]
	+ Explanation

VIII. Miscellaneous:
- Whatever else you want the grader know about your development.  You can create your own subsections headings here.