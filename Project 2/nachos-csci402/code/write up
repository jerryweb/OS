Title:  Writeup for Project 2, Summer 2015
 Date:  06/25/15
 Group:	Name		Email				SS#
		Jerry Webb	jerryweb@usc.edu	1288504108
		Andrew Lee	lee533@usc.edu		7540910244
		Hao Cui		hcui@usc.edu		1454367516

I. Requirements:
    Implement syscalls:
        Fork: create and run a new thread.
        Exec: create and run a new process.
        Exit: exit the current thread and clean up memory.
        Yield: yield the current thread.
        CreateLock: create a lock stored in the kernel.
        Acquire: acquire a lock stored in the kernel.
        Release: release a lock stored in the kernel.
        DestroyLock: destroy a lock stored in the kernel.
        CreateCondition: create a condition stored in the kernel.
        Wait: wait on a condition stored in the kernel.
        Signal: signal a condition stored in the kernel.
        Broadcast: broadcast on a condition stored in the kernel.
        DestroyCondition: destroy a condition stored in the kernel.
        Printf: print a given string and int parameters to the console.
    Write tests to make sure these syscalls work as intended, both positive and negative.
    Convert the airport from project 1 to use the syscalls and run a test where at least two instances run concurrently.

II. Assumptions:
	The application programmer can count (i.e. they always supply the correct number of characters when passing in a char* string in via syscall).
    Syscalls are always called with the correct type (e.g. no trying to input a char* for a syscall which takes in an int); this should mostly be taken care of by the compiler, but spurious typecasting may or may not be weeded out by error cases depending on the value.

III. Design:
    

IV. Implementation:
	+ Files Modified
        in code:
            Makefile.common
        in code\test:
            Makefile
            start.s
        in code\threads:
            airline.h/.cc
            airport.h/.cc
            airportobjects.h
            cargo.h/.cc
            checkin.h/.cc
            liaison.h/.cc
            list.h/.cc
            lockTest.cc         ???
            manager.h/.cc
            passenger.h/.cc
            screenofficer.h/.cc
            securityinspector.h/.cc
            synch.h/.cc
            system.h/.cc
            thread.h/.cc        ???
            threadtest.cc
        in code\userprog:
            addrspace.h/.cc
            bitmap.h/.cc        ???
            exception.cc
            progtest.cc         ???
            syscall.h
            table.h

	+ Files added
        in code\test:
            condTest.c
            condTestHelper.c
            execTest.c
            forkTest.c
            lockTest.c
            lockTestHelper.c
            printfTest.c

	+ Data Structures added, and the file they were added to.
        Classes: 
            

        Structs:
            

        Enums:
            

        Arrays, Lists, and Tables:
            

	+ Data Structures modified, and the file they were added to.
        

	+ Functions added and in which file.
        

	+ Functions modified and in which file.
        

V. Testing:  (For each test case, you must show)
	+ How to test
        nachos -x ../test/<xTest>
        run without -rs to ensure proper sequence of events

    + Test Output
        

VI. Discussion:
	+ Experiment expectation.  (What you hope will happen.)
        

    + Experiment result.  (What actually happens.)
        


	+ Explanation
        

VIII. Miscellaneous:
    Security unfinished
    
    
    
    
